name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 20
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '20'

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install Angular CLI
      run: npm install -g @angular/cli

    - name: Install backend dependencies
      run: cd back && mvn install

    - name: Run backend tests and generate coverage report
      run: cd back && mvn test jacoco:report

    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v2
      with:
        name: jacoco-report
        path: back/target/site/jacoco

    - name: Install frontend dependencies
      run: cd front && npm install
      
    - name: Install npm install karma-junit-reporter 
      run: cd front && npm install karma-junit-reporter --save-dev

    - name: Install npm karma-sonarqube-unit-reporter 
      run: cd front && npm install karma-sonarqube-unit-reporter --save-dev
      
    - name: Run frontend tests
      run: cd front && ng test --watch=false --browsers=ChromeHeadless --code-coverage=true

    - name: Build frontend
      run: cd front && npm run build --prod

    - name: Build backend
      run: cd back && mvn package -DskipTests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    - name: Pull existing Docker image tags
      run: |
        docker pull walidzerrifi/backend:latest || true
        docker pull walidzerrifi/frontend:latest || true
        
    - name: List all Docker images
      run: docker images
      
    - name: Debug Docker images
      run: docker images walidzerrifi/frontend --format "{{.Repository}}:{{.Tag}}"
    - name: Read current Docker image version
      id: read_docker_version
      run: |
        current_version=$(docker images walidzerrifi/frontend --format "{{.Tag}}" | sort -V | tail -n 1)
        if [ -z "$current_version" ]; then
          echo "No existing Docker image found for walidzerrifi/frontend. Starting with version 0.0.0."
          current_version="0.0.0"
        fi
        echo "Current Docker image version: $current_version"
        echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV
    - name: Print current version for debugging
      run: echo "Current version from env ${{ env.CURRENT_VERSION }}"
    - name: Increment version
      id: increment_version
      run: |
        current_version=${{ env.CURRENT_VERSION }}
        IFS='.' read -r -a version_parts <<< "$current_version"
        major=${version_parts[0]}
        minor=${version_parts[1]}
        patch=${version_parts[2]}
        patch=$((patch + 1))
        new_version="$major.$minor.$patch"
        echo "New Docker image version: $new_version"
        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
    - name: Print new version for debugging
      run: echo "New version from env ${{ env.NEW_VERSION }}" 
    - name: Build and push Docker images
      run: |
        docker build -t walidzerrifi/frontend:%Y-%m-%d %H:%M:%S  ./front
        docker build -t walidzerrifi/backend:%Y-%m-%d %H:%M:%S ./back
        docker push walidzerrifi/frontend:%Y-%m-%d %H:%M:%S
        docker push walidzerrifi/backend:%Y-%m-%d %H:%M:%S

    - name: Install Docker Compose
      run: sudo apt-get install docker-compose

    - name: Start services with Docker Compose
      run: docker-compose up -d

    - name: Clear Sonar Cache
      run: rm -rf /home/runner/.sonar/cache/*

    - name: Install SonarQube Scanner
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner-cli-4.6.2.2472-linux.zip
        sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
        echo "export PATH=$PATH:/opt/sonar-scanner/bin" >> $GITHUB_ENV

    - name: Analyze with SonarQube
      env:
        SONAR_TOKEN: sqa_4ef6b3dbd278815808ce8b07e7e9f1bbf70e2463
        SONAR_HOST_URL: https://mysonarqube.loca.lt/
      run: |
        # Backend analysis
        cd back
        /opt/sonar-scanner/bin/sonar-scanner \
          -Dsonar.projectKey=backend \
          -Dsonar.sources=./src \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN
        # Frontend analysis
        cd ../front
        /opt/sonar-scanner/bin/sonar-scanner \
          -Dsonar.projectKey=frontend \
          -Dsonar.sources=./src \
          -Dsonar.javascript.jstest.reportsPath=coverage \
          -Dsonar.junit.reportPaths=coverage/test-results.xml \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN

          
