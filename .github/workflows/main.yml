name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest  # Utiliser Ubuntu au lieu de Windows

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 20
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '20'

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install Angular CLI
      run: npm install -g @angular/cli

    - name: Install backend dependencies
      run: cd back && mvn install

    - name: Run backend tests and generate coverage report
      run: cd back && mvn test jacoco:report

    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v2
      with:
        name: jacoco-report
        path: back/target/site/jacoco

    - name: Install frontend dependencies
      run: cd front && npm install

    - name: Run frontend tests
      run: cd front && ng test --watch=false --browsers=ChromeHeadless

    - name: Build frontend
      run: cd front && npm run build --prod

    - name: Build backend
      run: cd back && mvn package -DskipTests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker images
      run: |
        docker build -t walidzerrifi/frontend:latest ./front
        docker build -t walidzerrifi/backend:latest ./back
        docker push walidzerrifi/frontend:latest
        docker push walidzerrifi/backend:latest

    - name: Install Docker Compose
      run: sudo apt-get install docker-compose

    - name: Start services with Docker Compose
      run: docker-compose up -d
    - name: Install SonarQube Scanner
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner-cli-4.6.2.2472-linux.zip
        sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
        echo "export PATH=$PATH:/opt/sonar-scanner/bin" >> $GITHUB_ENV
        
    - name: Clear Sonar Cache
      run: rm -rf /home/runner/.sonar/cache/*
    - name: Install SonarQube Scanner
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner-cli-4.6.2.2472-linux.zip
        sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
        echo "export PATH=$PATH:/opt/sonar-scanner/bin" >> $GITHUB_ENV

    - name: Analyze with SonarQube
      env:
        SONAR_TOKEN: squ_f28f2a3081c130222748fa227aec3102890e52d6
        SONAR_HOST_URL:  https://mysonarqube.loca.lt/
      run: |
        # Backend analysis
        cd back
        /opt/sonar-scanner/bin/sonar-scanner \
          -Dsonar.projectKey=backend \
          -Dsonar.sources=./src \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN
          -Dsonar.java.binaries=target/classes
        # Frontend analysis
        cd ../front
        /opt/sonar-scanner/bin/sonar-scanner \
          -Dsonar.projectKey=frontend \
          -Dsonar.sources=./src \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN

    
